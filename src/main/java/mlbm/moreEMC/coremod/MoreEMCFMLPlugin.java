package mlbm.moreEMC.coremod;

import java.util.Map;
import java.util.Set;

import org.apache.commons.lang3.StringUtils;

import com.google.common.eventbus.EventBus;
import com.google.common.eventbus.Subscribe;

import cpw.mods.fml.common.DummyModContainer;
import cpw.mods.fml.common.LoadController;
import cpw.mods.fml.common.ModMetadata;
import cpw.mods.fml.common.discovery.ASMDataTable;
import cpw.mods.fml.common.discovery.ASMDataTable.ASMData;
import cpw.mods.fml.common.event.FMLConstructionEvent;
import cpw.mods.fml.relauncher.IFMLCallHook;
import cpw.mods.fml.relauncher.IFMLLoadingPlugin;
import mlbm.moreEMC.api.ScriptAPIProvider;
import mlbm.moreEMC.api.ScriptConstantProvider;
import mlbm.moreEMC.main.Constants;
import mlbm.moreEMC.script.core.ScriptManager;

@IFMLLoadingPlugin.TransformerExclusions({ "mlbm.moreEMC.coremod." })
@IFMLLoadingPlugin.SortingIndex(1001)
public class MoreEMCFMLPlugin implements IFMLLoadingPlugin {

	@Override
	public String[] getASMTransformerClass() {
		return null;
	}

	@Override
	public String getModContainerClass() {
		return MoreEMCDummyContainer.class.getName();
	}

	@Override
	public String getSetupClass() {
		return MoreEMCDummyContainer.class.getName();
	}

	@Override
	public void injectData(Map<String, Object> data) {
	}

	@Override
	public String getAccessTransformerClass() {
		return null;
	}

	public static class MoreEMCDummyContainer extends DummyModContainer implements IFMLCallHook {
		public MoreEMCDummyContainer() {
			super(new ModMetadata());
			ModMetadata data = getMetadata();
			data.autogenerated = true;
			data.modId = data.name = data.description = "MoreEMC Coremod";
			data.parent = Constants.MODID;
			data.version = "unused";
		}

		@Override
		public boolean registerBus(EventBus bus, LoadController controller) {
			bus.register(this);
			return true;
		}

		@Subscribe
		public void construction(FMLConstructionEvent event) {
			try {
				ASMDataTable asm = event.getASMHarvestedData();
				Set<ASMData> annotations = asm.getAll("mlbm.moreEMC.api.ScriptAPI");
				for (ASMData data : annotations) {
					try {
						ScriptAPIProvider instance = (ScriptAPIProvider) Class.forName(data.getClassName())
								.newInstance();
						ScriptManager.addAPI(instance);
						System.out.println("MoreEMC API Annotation Processed:modid=" + instance.getModID()
								+ ",classname:" + data.getClassName());
					} catch (Throwable t) {
						System.out.println(
								"MoreEMC has severe error while processing API annotation:" + data.getClassName());
						t.printStackTrace();
					}
				}
				annotations = asm.getAll("mlbm.moreEMC.api.ScriptConstantProvider");
				for (ASMData data : annotations) {
					try {
						Class cla = Class.forName(data.getClassName());
						String propertyname = ((ScriptConstantProvider) cla.getAnnotation(ScriptConstantProvider.class))
								.propertyName();
						if (!StringUtils.isEmpty(propertyname)) {
							ScriptManager.addConstantProvider(cla);
							System.out.println("MoreEMC API Annotation Processed: classname=" + data.getClassName());
						} else {
							throw new Exception("propertyname is null");
						}
					} catch (Throwable t) {
						System.out.println(
								"MoreEMC has severe error while processing API annotation:" + data.getClassName());
						t.printStackTrace();
					}
				}
			} catch (Throwable t) {
				t.printStackTrace();
			}
		}

		@Override
		public Void call() throws Exception {
			return null;
		}

		@Override
		public void injectData(Map<String, Object> data) {
			// TODO Auto-generated method stub

		}

	}

}
